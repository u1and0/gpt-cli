# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: gpt-cli publisher

on:
  # 手動ビルド
  workflow_dispatch:
  # mainかreleaseブランチへpushされたとき
  push:
    branches:
      - main
      - 'release/**'  # releaseブランチへのpushをトリガー
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # タグ付けされたpushをトリガー
    paths:
      - "**/*.ts"
      - ".github/workflows/deno.yml"
      - "*.json"
  pull_request:
    branches:
      - main
    paths:
      - "**/*.ts"
      - ".github/workflows/deno.yml"
      - "*.json"

permissions:
  contents: write # to be able to publish a GitHub release
  id-token: write   # to enable use of OIDC for npm provenance

jobs:
  formatter:
    name: format & test
    runs-on: ubuntu-latest

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x.x

      - name: Verify formatting
        run: deno fmt --check index.ts lib/*.ts test/*.ts

      - name: Run linter
        run: deno lint index.ts lib/*.ts test/*.ts

      - name: Run checker
        run: deno check index.ts lib/*.ts test/*.ts

      - name: Run tests
        run: deno test --allow-env --allow-read --allow-write test/*.ts

  builder:
    name: compile & publish artifact
    runs-on: ${{ matrix.vm }}
    needs: formatter
    strategy:
      matrix:
        include:
          - name: linux-x64
            vm: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: linux-arm64
            vm: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - name: macosx-x64
            vm: macos-latest
            target: x86_64-apple-darwin
          - name: macosx-arm64
            vm: macos-latest
            target: aarch64-apple-darwin
          - name: windows-x64
            vm: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x.x

      - name: Build binary
        run: deno compile --allow-read --allow-net --allow-env --target ${{ matrix.target }} --output gpt index.ts

      - name: Create ZIP package (Unix/MacOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release-package
          cp gpt release-package/gpt
          zip -r gpt-cli-${{ matrix.name }}.zip release-package/
          rm -rf release-package

      - name: Create ZIP package (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir release-package
          copy gpt.exe release-package\gpt.exe
          Compress-Archive -Path release-package\* -DestinationPath gpt-cli-${{ matrix.name }}.zip
          Remove-Item -Recurse -Force release-package

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpt-cli-${{ matrix.name }}
          path: gpt-cli-${{ matrix.name }}.zip
          overwrite: true

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: builder
    permissions:
      contents: write # to be able to publish a GitHub release
      id-token: write   # to enable use of OIDC for npm provenance

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Get Version from Tag (or branch)
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT  # タグの場合はfalse
          else
            echo "version=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT   # release or mainブランチの場合はtrue
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*'
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body_path: ./CHANGELOG.md
          draft: false
          # タグ以外のpushはprereleaseとなる。
          prerelease: ${{ steps.get_version.outputs.is_prerelease }}
          # prerelease が falseの場合はtrueになる
          make_latest: ${{ steps.get_version.outputs.is_prerelease == 'false' }}
          files: artifacts/**/*.zip
